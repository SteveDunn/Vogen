<Project Sdk="Microsoft.NET.Sdk">

  <Target Name="MyTarget" AfterTargets="MinVer" Condition="'$(ForceVersion)' != ''">
    <Message Condition="'$(ForceVersion)' != ''" Importance="High" Text="** Forcing package version to be '$(ForceVersion)' **" />
    <PropertyGroup>
      <PackageVersion>$(ForceVersion)</PackageVersion>
      <Version>$(ForceVersion)</Version>
    </PropertyGroup>
  </Target>  

  <PropertyGroup>
    <TargetFrameworks>net7.0;netstandard2.0</TargetFrameworks>
    <LanguageVersion>10.0</LanguageVersion>
    <ImplicitUsings>disable</ImplicitUsings>
    <nullable>enable</nullable>
    <IsRoslynComponent>true</IsRoslynComponent>

    <AppendTargetFrameworkToOutputPath>true</AppendTargetFrameworkToOutputPath>

    <SuppressTfmSupportBuildWarnings>true</SuppressTfmSupportBuildWarnings>
    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
  </PropertyGroup>
  
  <!-- Uncomment if you're getting unexpected minver results-->  
  <!-- <PropertyGroup>
    <MinVerVerbosity>diagnostic</MinVerVerbosity>
  </PropertyGroup> -->

  <!-- only used at compile time and not run time-->
  <PropertyGroup>
    <IncludeBuildOutput>false</IncludeBuildOutput>
     <!--<GeneratePackageOnBuild>True</GeneratePackageOnBuild>--> 
    <PackageReadmeFile>nuget-readme.md</PackageReadmeFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="Generators\Conversions\JsonNetConverters\**" />
    <Compile Remove="Generators\Conversions\SystemTextJsonConverters\**" />
    <Compile Remove="Generators\Conversions\TypeConverters\**" />
    <Compile Remove="Templates\**\*.cs" />
    <EmbeddedResource Include="Templates\**\*.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Remove="Generators\Conversions\JsonNetConverters\**" />
    <EmbeddedResource Remove="Generators\Conversions\SystemTextJsonConverters\**" />
    <EmbeddedResource Remove="Generators\Conversions\TypeConverters\**" />
    <None Remove="Generators\Conversions\JsonNetConverters\**" />
    <None Remove="Generators\Conversions\SystemTextJsonConverters\**" />
    <None Remove="Generators\Conversions\TypeConverters\**" />
  </ItemGroup>
  <ItemGroup>
    <None Remove="AnalyzerReleases.Shipped.md" />
    <None Remove="AnalyzerReleases.Unshipped.md" />
  </ItemGroup>
  <ItemGroup>
    <AdditionalFiles Include="AnalyzerReleases.Shipped.md" />
    <AdditionalFiles Include="AnalyzerReleases.Unshipped.md" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\docs\nuget-readme.md" Pack="true" PackagePath="\" />
    <None Include="$(OutputPath)\netstandard2.0\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <None Include="$(OutputPath)\netstandard2.0\Vogen.SharedTypes.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    
    <None Include="$(OutputPath)\netstandard2.0\Vogen.SharedTypes.dll" Pack="true" PackagePath="lib\netstandard2.0" Visible="true" />
    <None Include="$(OutputPath)\net7.0\Vogen.SharedTypes.dll" Pack="true" PackagePath="lib\net7.0" Visible="true" />

  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\assets\logo\gradient_128x128.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.5.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.3.1" PrivateAssets="all" />

  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="MinVer" Version="4.3.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Vogen.SharedTypes\Vogen.SharedTypes.csproj" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Resources.Designer.cs">
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources.resx">
      <SubType>Designer</SubType>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <Generator>ResXFileCodeGenerator</Generator>
    </EmbeddedResource>
  </ItemGroup>

  <PropertyGroup>
    <Features>strict</Features>
    <PackageId>Vogen</PackageId>
    <Version>1.0.0</Version>
    <PackageVersion>1.0.0</PackageVersion>
    <PackageProjectUrl>https://github.com/SteveDunn/Vogen</PackageProjectUrl>
    <EnablePackageValidation>true</EnablePackageValidation>

    <Authors>Steve Dunn</Authors>
    <Copyright>Copyright Steve Dunn</Copyright>
    <Title>Vogen - a semi-opinionated library which generates Value Objects that wrap simple primitives such as int, string, double etc. Value Objects help combat 'Stringly Typed' software and Primitive Obsession.  Be confident with your types!</Title>
    <PackageTags>vogen;stringlytyped;primitive;obsession;valuetype;valuetypes;valueobj;valueobjects;ddd</PackageTags>
    <PackageIcon>gradient_128x128.png</PackageIcon>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <RepositoryUrl>https://github.com/SteveDunn/Vogen</RepositoryUrl>
    <Description>
      This package contains a Souce Generator which generates Value Objects that wrap simple primitives such as int, string, double etc.

      A ValueObject is a strongly typed (strongly, not stringly) domain object that is immutable.

      Instead of `int customerId = 42;` we have `var customerId = CustomerId.From(42);`

      To use, just create something like this:

      [ValueObject(typeof(int))]
      public partial struct CustomerId
      {
      }

      var customerId = CustomerId.From(42);

      Validation is in just one place. You can't introduce bad objects into your domain, therefore you can assume that in your domain every ValueObject is valid.
    </Description>
    <RepositoryType>git</RepositoryType>

  </PropertyGroup>
</Project>
