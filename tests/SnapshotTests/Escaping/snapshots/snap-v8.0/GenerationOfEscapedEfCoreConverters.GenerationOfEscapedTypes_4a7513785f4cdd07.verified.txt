[  
#if NET8_0_OR_GREATER

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669, CS8632

#pragma warning disable CS8604 // Possible null reference argument.

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

namespace @class;
    
  public static class EfCoreConverters__Ext
  {
      public static global::Microsoft.EntityFrameworkCore.ModelConfigurationBuilder RegisterAllInEfCoreConverters(this global::Microsoft.EntityFrameworkCore.ModelConfigurationBuilder configurationBuilder)
      {
        configurationBuilder.Properties<@class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event>().HaveConversion<@class.EfCoreConverters.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueConverter, @class.EfCoreConverters.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueComparer>();


        return configurationBuilder; 
      }
  }

#endif
  
#if NET8_0_OR_GREATER

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669, CS8632

#pragma warning disable CS8604 // Possible null reference argument.

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

namespace @class;
    
public partial class EfCoreConverters
{
    
    public class escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueConverter : global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<@class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event, global::System.String>
    {
        public escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueConverter() : this(null) { }
        public escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueConverter(global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
            : base(
                vo => global::System.Text.Json.JsonSerializer.Serialize(vo.Value, default(global::System.Text.Json.JsonSerializerOptions)),
            text => ProxyForCall__Deserialize(global::System.Text.Json.JsonSerializer.Deserialize<@class.@record.@struct.@float.@event>(text, default(global::System.Text.Json.JsonSerializerOptions))),
                mappingHints
            ) { }
  static @class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event ProxyForCall__Deserialize(@class.@record.@struct.@float.@event value) => Call__Deserialize(default, value);
 
  [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.StaticMethod, Name = "__Deserialize")]
  static extern @class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event Call__Deserialize(@class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event @this, @class.@record.@struct.@float.@event value);      
    }
       public class escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueComparer : global::Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer<@class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event>
       {
           public escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueComparer() : base(
               (left, right) => DoCompare(left, right), 
                instance => instance.IsInitialized() ? UnderlyingValue(instance).GetHashCode() : 0) 
           { 
           }
               
           static bool DoCompare(@class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event left, @class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event right)
           {
               // if both null, then they're equal
               if (left is null) return right is null;
               
               // if only right is null, then they're not equal
               if (right is null) return false;
               
               // if they're both the same reference, then they're equal
               if (ReferenceEquals(left, right)) return true;
               
               // if neither are initialized, then they're equal
                if(!left.IsInitialized() && !right.IsInitialized()) return true;
               
                return left.IsInitialized() && right.IsInitialized() && UnderlyingValue(left).Equals(UnderlyingValue(right));            
           }                
 private static @class.@record.@struct.@float.@event UnderlyingValue(@class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event i) => UnsafeValueField( i);

  [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "_value")]
  static extern ref @class.@record.@struct.@float.@event UnsafeValueField( @class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event @this);                
}
}

public static class escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event__Ext 
{
        public static global::Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<@class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event> HasVogenConversion(this global::Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<@class.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event> propertyBuilder) =>
            propertyBuilder.HasConversion<@class.EfCoreConverters.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueConverter, @class.EfCoreConverters.escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventEfCoreValueComparer>();
}


#endif
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669, CS8632
#pragma warning disable CS8604 // Possible null reference argument.

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
namespace generator
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    public class VogenTypesFactory : global::System.Text.Json.Serialization.JsonConverterFactory
    {
        public VogenTypesFactory()
        {
        }

        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>> _lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, global::System.Lazy<global::System.Text.Json.Serialization.JsonConverter>>
        {
        };
        public override bool CanConvert(global::System.Type typeToConvert) => _lookup.ContainsKey(typeToConvert);
        public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options) => _lookup[typeToConvert].Value;
    }
}
  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618
// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036
// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097
// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669, CS8632
#pragma warning disable CS8604 // Possible null reference argument.

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591
namespace @class
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventNewtonsoftJsonConverter))]
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: @class.@record.@struct.@float.@event, Value = { _value }")]
    public partial record class escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event : global::System.IEquatable<escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event>, global::System.IEquatable<@class.@record.@struct.@float.@event>
    {
#if DEBUG
private readonly global::System.Diagnostics.StackTrace _stackTrace  = null!;
#endif
#if !VOGEN_NO_VALIDATION
        private readonly global::System.Boolean _isInitialized;
#endif
        private readonly @class.@record.@struct.@float.@event _value;
        /// <summary>
        /// Gets the underlying <see cref = "@class.@record.@struct.@float.@event"/> value if set, otherwise a <see cref = "Vogen.ValueObjectValidationException"/> is thrown.
        /// </summary>
        public @class.@record.@struct.@float.@event Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                EnsureInitialized();
                return _value;
            }

            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            init
            {
                _value = value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
#if !VOGEN_NO_VALIDATION
            _isInitialized = false;
#endif
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event(@class.@record.@struct.@float.@event value)
        {
            _value = value;
#if !VOGEN_NO_VALIDATION
            _isInitialized = true;
#endif
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event From(@class.@record.@struct.@float.@event value)
        {
            return new escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event(value);
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying type.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, false will be returned.
        /// </summary>
        /// <param name = "value">The underlying type.</param>
        /// <param name = "vo">An instance of the value object.</param>
        /// <returns>True if the value object can be built, otherwise false.</returns>
        
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member because of nullability attributes.

        public static bool TryFrom(
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
        @class.@record.@struct.@float.@event value, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)]
#endif
        out escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event vo)
#pragma warning restore CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member because of nullability attributes.

        {
            vo = new escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event(value);
            return true;
        }

        /// <summary>
        /// Tries to build an instance from the provided underlying value.
        /// If a normalization method is provided, it will be called.
        /// If validation is provided, and it fails, an error will be returned.
        /// </summary>
        /// <param name = "value">The primitive value.</param>
        /// <returns>A <see cref = "Vogen.ValueObjectOrError{T}"/> containing either the value object, or an error.</returns>
        public static Vogen.ValueObjectOrError<escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event> TryFrom(@class.@record.@struct.@float.@event value)
        {
            return new Vogen.ValueObjectOrError<escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event>(new escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event(value));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#if VOGEN_NO_VALIDATION
#pragma warning disable CS8775
  public bool IsInitialized() => true;
#pragma warning restore CS8775
#else
        public bool IsInitialized() => _isInitialized;
#endif
        // only called internally when something has been deserialized into
        // its primitive type.
        private static escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event __Deserialize(@class.@record.@struct.@float.@event value)
        {
            return new escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event(value);
        }

        public virtual global::System.Boolean Equals(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if (!IsInitialized() || !other.IsInitialized())
                return false;
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<@class.@record.@struct.@float.@event>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event other, global::System.Collections.Generic.IEqualityComparer<escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event> comparer)
        {
            return comparer.Equals(this, other);
        }

        public global::System.Boolean Equals(@class.@record.@struct.@float.@event primitive)
        {
            return Value.Equals(primitive);
        }

        public static global::System.Boolean operator ==(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event left, @class.@record.@struct.@float.@event right) => left.Value.Equals(right);
        public static global::System.Boolean operator ==(@class.@record.@struct.@float.@event left, escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event right) => right.Value.Equals(left);
        public static global::System.Boolean operator !=(@class.@record.@struct.@float.@event left, escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event right) => !(left == right);
        public static global::System.Boolean operator !=(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event left, @class.@record.@struct.@float.@event right) => !(left == right);
        public static explicit operator escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event(@class.@record.@struct.@float.@event value) => From(value);
        public static explicit operator @class.@record.@struct.@float.@event(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event value) => value.Value;
#nullable disable
#nullable restore
        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32)2166136261;
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<@class.@record.@struct.@float.@event>.Default.GetHashCode(Value);
                return hash;
            }
        }

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        /// <inheritdoc cref = "@class.@record.@struct.@float.@event.ToString()"/>
        public override global::System.String ToString() => IsInitialized() ? Value.ToString() ?? "" : "[UNINITIALIZED]";
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private void EnsureInitialized()
        {
            if (!IsInitialized())
            {
#if DEBUG
               ThrowHelper.ThrowWhenNotInitialized(_stackTrace);
#else
                ThrowHelper.ThrowWhenNotInitialized();
#endif
            }
        }

#nullable disable
        class escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = ((escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event)value).Value;
                serializer.Serialize(writer, id);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<@class.@record.@struct.@float.@event?>(reader);
                return result.HasValue ? escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event.__Deserialize(result.Value) : null;
            }
        }

#nullable restore
        internal sealed class escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventDebugView
        {
            private readonly escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event _t;
            escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventDebugView(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__event t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "@class.@record.@struct.@float.@event";
            public @class.@record.@struct.@float.@event Value => _t.Value;
            public global::System.String Conversions => @"[global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_partial_record_classConversions_NewtonsoftJsonrecord__struct__float__eventNewtonsoftJsonConverter))]
";
        }

        static class ThrowHelper
        {
#if NETCOREAPP3_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute]
#endif
            internal static void ThrowInvalidOperationException(string message) => throw new global::System.InvalidOperationException(message);
#if NETCOREAPP3_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute]
#endif
            internal static void ThrowArgumentException(string message, string arg) => throw new global::System.ArgumentException(message, arg);
#if NETCOREAPP3_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute]
#endif
            internal static void ThrowWhenCreatedWithNull() => throw CreateCannotBeNullException();
#if NETCOREAPP3_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute]
#endif
            internal static void ThrowWhenNotInitialized() => throw CreateValidationException("Use of uninitialized Value Object.");
#if NETCOREAPP3_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute]
#endif
            internal static void ThrowWhenNotInitialized(global::System.Diagnostics.StackTrace stackTrace) => throw CreateValidationException("Use of uninitialized Value Object at: " + stackTrace ?? "");
#if NETCOREAPP3_0_OR_GREATER
    [global::System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute]
#endif
            internal static void ThrowWhenValidationFails(Vogen.Validation validation)
            {
                throw CreateValidationException(validation);
            }

            internal static System.Exception CreateValidationException(string message) => new global::Vogen.ValueObjectValidationException(message);
            internal static System.Exception CreateCannotBeNullException() => new global::Vogen.ValueObjectValidationException("Cannot create a value object with null.");
            internal static System.Exception CreateValidationException(Vogen.Validation validation)
            {
                var ex = CreateValidationException(validation.ErrorMessage);
                if (validation.Data != null)
                {
                    foreach (var kvp in validation.Data)
                    {
                        ex.Data[kvp.Key] = kvp.Value;
                    }
                }

                return ex;
            }
        }
    }
}
]