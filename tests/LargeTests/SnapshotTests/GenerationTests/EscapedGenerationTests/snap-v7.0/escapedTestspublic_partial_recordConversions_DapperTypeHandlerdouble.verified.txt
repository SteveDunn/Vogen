// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Supress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace @class
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(escapedTestspublic_partial_recordConversions_DapperTypeHandlerdoubleDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: double, Value = { _value }")]
    public partial record class escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble  :  global::System.IComparable<escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble>
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly double _value;
        
        /// <summary>
        /// Gets the underlying <see cref="double" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public double Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            init
            {
                

                

                

                _value = value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble(double value)
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble From(double value)
        {
            

            

            escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble instance = new escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble(value);

            

            return instance;
        }

        public static explicit operator escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble(double value) => From(value);
        public static explicit operator double(escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble value) => value.Value;

        public int CompareTo(escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble other) => Value.CompareTo(other.Value);

        // only called internally when something has been deserialized into
        // its primitive type.
        private static escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble Deserialize(double value)
        {
            

            

            

            return new escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble(value);
        }

        private void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }


        

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        /// <summary>Returns the string representation of the underlying <see cref="System.Double" />.</summary>
    /// <inheritdoc cref="System.Double.ToString()" />
    public override global::System.String ToString() => Value.ToString();

        



        public class DapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble>
        {
            public override void SetValue(global::System.Data.IDbDataParameter parameter, escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble value)
            {
                parameter.DbType = global::System.Data.DbType.Double;
                parameter.Value = value.Value;
            }

            public override escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble Parse(object value)
            {
                return value switch
                {
                    global::System.Double doubleValue => escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble.Deserialize(doubleValue),
                    global::System.Int32 intValue => escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble.Deserialize(intValue),
                    global::System.Int64 longValue when longValue < global::System.Double.MaxValue => escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble.Deserialize((global::System.Double)longValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Double.TryParse(stringValue, out var result) => escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble.Deserialize(result),
                    _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble"),
                };
            }
        }




        internal sealed class escapedTestspublic_partial_recordConversions_DapperTypeHandlerdoubleDebugView
        {
            private readonly escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble _t;

            escapedTestspublic_partial_recordConversions_DapperTypeHandlerdoubleDebugView(escapedTestspublic_partial_recordConversions_DapperTypeHandlerdouble t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Double";
            public System.Double Value => _t.Value ;

            public global::System.String Conversions => @"";
                }
    }
}