// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

using Vogen;

namespace Whatever
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.ComponentModel.TypeConverter(typeof(public_partial_classConversions_TypeConverterdoubleTypeConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(public_partial_classConversions_TypeConverterdoubleDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Double, Value = { _value }")]
    public partial class public_partial_classConversions_TypeConverterdouble : global::System.IEquatable<public_partial_classConversions_TypeConverterdouble>
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly System.Double _value;
        
public System.Double Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public public_partial_classConversions_TypeConverterdouble()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private public_partial_classConversions_TypeConverterdouble(System.Double value)
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static public_partial_classConversions_TypeConverterdouble From(System.Double value)
        {
            

            

            public_partial_classConversions_TypeConverterdouble instance = new public_partial_classConversions_TypeConverterdouble(value);

            

            return instance;
        }

        public global::System.Boolean Equals(public_partial_classConversions_TypeConverterdouble other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;
	    	
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Double>.Default.Equals(Value, other.Value);
        }

        public global::System.Boolean Equals(System.Double primitive) => Value.Equals(primitive);

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((public_partial_classConversions_TypeConverterdouble) obj);
        }

        public static global::System.Boolean operator ==(public_partial_classConversions_TypeConverterdouble left, public_partial_classConversions_TypeConverterdouble right) => Equals(left, right);
        public static global::System.Boolean operator !=(public_partial_classConversions_TypeConverterdouble left, public_partial_classConversions_TypeConverterdouble right) => !Equals(left, right);

        public static global::System.Boolean operator ==(public_partial_classConversions_TypeConverterdouble left, System.Double right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(public_partial_classConversions_TypeConverterdouble left, System.Double right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(System.Double left, public_partial_classConversions_TypeConverterdouble right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(System.Double left, public_partial_classConversions_TypeConverterdouble right) => !Equals(left, right.Value);

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32) 2166136261;
                hash = (hash * 16777619) ^ Value.GetHashCode();
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Double>.Default.GetHashCode();
                return hash;
            }
        }

        private void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }


        

        public override global::System.String ToString() => Value.ToString();

        


        class public_partial_classConversions_TypeConverterdoubleTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Double) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Double doubleValue => public_partial_classConversions_TypeConverterdouble.From(doubleValue),
                    global::System.Int64 longValue => public_partial_classConversions_TypeConverterdouble.From((global::System.Double)longValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Double.TryParse(stringValue, out var result) => public_partial_classConversions_TypeConverterdouble.From(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Double) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is public_partial_classConversions_TypeConverterdouble idValue)
                {
                    if (destinationType == typeof(global::System.Double))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }





        internal sealed class public_partial_classConversions_TypeConverterdoubleDebugView
        {
            private readonly public_partial_classConversions_TypeConverterdouble _t;

            public_partial_classConversions_TypeConverterdoubleDebugView(public_partial_classConversions_TypeConverterdouble t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Double";
            public System.Double Value => _t.Value ;

            public global::System.String Conversions => @"[global::System.ComponentModel.TypeConverter(typeof(public_partial_classConversions_TypeConverterdoubleTypeConverter))]
";
                }
    }
}