// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

using Vogen;

namespace Whatever
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(internal_sealed_partial_recordConversions_SystemTextJsoncharSystemTextJsonConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(internal_sealed_partial_recordConversions_SystemTextJsoncharDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: char, Value = { _value }")]
    internal sealed partial record class internal_sealed_partial_recordConversions_SystemTextJsonchar
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly char _value;
        
public char Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            init
            {
                

                

                

                _value = value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public internal_sealed_partial_recordConversions_SystemTextJsonchar()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private internal_sealed_partial_recordConversions_SystemTextJsonchar(char value)
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static internal_sealed_partial_recordConversions_SystemTextJsonchar From(char value)
        {
            

            

            internal_sealed_partial_recordConversions_SystemTextJsonchar instance = new internal_sealed_partial_recordConversions_SystemTextJsonchar(value);

            

            return instance;
        }

        private void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }


        

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        public override global::System.String ToString() => Value.ToString();

        
        class internal_sealed_partial_recordConversions_SystemTextJsoncharSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<internal_sealed_partial_recordConversions_SystemTextJsonchar>
        {
            public override internal_sealed_partial_recordConversions_SystemTextJsonchar Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var s = reader.GetString();

                return internal_sealed_partial_recordConversions_SystemTextJsonchar.From(s[0]);
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, internal_sealed_partial_recordConversions_SystemTextJsonchar value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.Value.ToString());
            }
        }







        internal sealed class internal_sealed_partial_recordConversions_SystemTextJsoncharDebugView
        {
            private readonly internal_sealed_partial_recordConversions_SystemTextJsonchar _t;

            internal_sealed_partial_recordConversions_SystemTextJsoncharDebugView(internal_sealed_partial_recordConversions_SystemTextJsonchar t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Char";
            public System.Char Value => _t.Value ;

            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(internal_sealed_partial_recordConversions_SystemTextJsoncharSystemTextJsonConverter))]
";
                }
    }
}