// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Supress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(public_readonly_partial_structConversions_NonedoubleDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: double, Value = { _value }")]
    public readonly partial struct public_readonly_partial_structConversions_Nonedouble : global::System.IEquatable<public_readonly_partial_structConversions_Nonedouble>, global::System.IEquatable<double> ,  global::System.IComparable<public_readonly_partial_structConversions_Nonedouble>
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly double _value;

        /// <summary>
        /// Gets the underlying <see cref="double" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public readonly double Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public public_readonly_partial_structConversions_Nonedouble()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private public_readonly_partial_structConversions_Nonedouble(double value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static public_readonly_partial_structConversions_Nonedouble From(double value)
        {
            

            public_readonly_partial_structConversions_Nonedouble instance = new public_readonly_partial_structConversions_Nonedouble(value);

            

            return instance;
        }

        public static explicit operator public_readonly_partial_structConversions_Nonedouble(double value) => From(value);
        public static explicit operator double(public_readonly_partial_structConversions_Nonedouble value) => value.Value;

        // only called internally when something has been deserialized into
        // its primitive type.
        private static public_readonly_partial_structConversions_Nonedouble Deserialize(double value)
        {
            

            

            return new public_readonly_partial_structConversions_Nonedouble(value);
        }

        public readonly global::System.Boolean Equals(public_readonly_partial_structConversions_Nonedouble other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return global::System.Collections.Generic.EqualityComparer<double>.Default.Equals(Value, other.Value);
        }

        public readonly global::System.Boolean Equals(double primitive) => Value.Equals(primitive);

        public readonly override global::System.Boolean Equals(global::System.Object obj)
        {
            return obj is public_readonly_partial_structConversions_Nonedouble && Equals((public_readonly_partial_structConversions_Nonedouble) obj);
        }

        public static global::System.Boolean operator ==(public_readonly_partial_structConversions_Nonedouble left, public_readonly_partial_structConversions_Nonedouble right) => Equals(left, right);
        public static global::System.Boolean operator !=(public_readonly_partial_structConversions_Nonedouble left, public_readonly_partial_structConversions_Nonedouble right) => !(left == right);

        public static global::System.Boolean operator ==(public_readonly_partial_structConversions_Nonedouble left, double right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(public_readonly_partial_structConversions_Nonedouble left, double right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(double left, public_readonly_partial_structConversions_Nonedouble right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(double left, public_readonly_partial_structConversions_Nonedouble right) => !Equals(left, right.Value);

        public int CompareTo(public_readonly_partial_structConversions_Nonedouble other) => Value.CompareTo(other.Value);

        
    /// <inheritdoc cref="double.TryParse(string?, out double)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(string? s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out public_readonly_partial_structConversions_Nonedouble result) {
        if(System.Double.TryParse(s, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="double.TryParse(System.ReadOnlySpan{char}, out double)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(System.ReadOnlySpan<char> s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out public_readonly_partial_structConversions_Nonedouble result) {
        if(System.Double.TryParse(s, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="double.TryParse(string?, System.Globalization.NumberStyles, System.IFormatProvider?, out double)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(string? s, System.Globalization.NumberStyles style, System.IFormatProvider? provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out public_readonly_partial_structConversions_Nonedouble result) {
        if(System.Double.TryParse(s, style, provider, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="double.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider?, out double)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.IFormatProvider? provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out public_readonly_partial_structConversions_Nonedouble result) {
        if(System.Double.TryParse(s, style, provider, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="double.TryParse(string?, System.IFormatProvider?, out double)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(string? s, System.IFormatProvider? provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out public_readonly_partial_structConversions_Nonedouble result) {
        if(System.Double.TryParse(s, provider, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="double.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider?, out double)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(System.ReadOnlySpan<char> s, System.IFormatProvider? provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out public_readonly_partial_structConversions_Nonedouble result) {
        if(System.Double.TryParse(s, provider, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }


        public readonly override global::System.Int32 GetHashCode() => global::System.Collections.Generic.EqualityComparer<double>.Default.GetHashCode(_value);

        /// <summary>Returns the string representation of the underlying type</summary>
    /// <inheritdoc cref="{item.UnderlyingTypeFullName}.ToString()" />
    public readonly override global::System.String ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        
 
        







        internal sealed class public_readonly_partial_structConversions_NonedoubleDebugView
        {
            private readonly public_readonly_partial_structConversions_Nonedouble _t;

            public_readonly_partial_structConversions_NonedoubleDebugView(public_readonly_partial_structConversions_Nonedouble t)
            {
                _t = t;
            }

            public global::System.Boolean IsInitialized => _t._isInitialized;
            public global::System.String UnderlyingType => "System.Double";
            public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public global::System.String Conversions => @"None";
                }

}
}