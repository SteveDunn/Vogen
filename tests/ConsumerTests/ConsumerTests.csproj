<Project Sdk="Microsoft.NET.Sdk">

  <Target Name="main" DependsOnTargets="EnsureLocalPackagesFolderExists">
    <!-- Msbuild will process the first target in the file by default.
            By creating this target, and making it depend on the two following targets,
            we can ensure that they will all be executed
            -->
  </Target>

  <PropertyGroup>
    <!-- Test directory-->
    <LocalPackagesDirectory>$(MSBuildProjectDirectory)\..\..\local-global-packages</LocalPackagesDirectory>
  </PropertyGroup>
  
    <Target Name="EnsureLocalPackagesFolderExists" BeforeTargets="Restore;CollectPackageReferences" Condition="'$(BuildingInsideVisualStudio)' == 'true'">
      <Error Condition="!Exists('$(LocalPackagesDirectory)')" Text="Run Test.ps1 to create the local packages folder that this project consumes" />
    </Target>

  <PropertyGroup>
    <TargetFrameworks Condition=" '$(OS)' == 'Windows_NT' ">net461;netcoreapp3.1;net5.0;net6.0;net7.0</TargetFrameworks>
    <TargetFrameworks Condition=" '$(OS)' != 'Windows_NT' ">netcoreapp3.1;net5.0;net6.0;net7.0</TargetFrameworks>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <UseLocallyBuiltPackage>true</UseLocallyBuiltPackage>
    <LangVersion>preview</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <TestPath Include="../../local-global-packages" />
  </ItemGroup>
  <Target Name="OnlyIfExists" Condition="Exists(@(TestPath))">
    <Message Text="Please run Test.ps1 to build the latest local nuget package that these tests consume" Importance="high" />
  </Target>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net7.0'">
    <PackageReference Include="linq2db" Version="4.4.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.0-rc.1.22426.7" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="7.0.0-rc.1.22426.7" />
    <PackageReference Include="System.Text.Json" Version="7.0.0-rc.1.22426.10" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net6.0'">
    <PackageReference Include="linq2db" Version="4.4.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="6.0.0-*" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="6.0.0-*" />
    <PackageReference Include="System.Text.Json" Version="6.0.0-*" />

  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net5.0'">
    <PackageReference Include="linq2db" Version="4.4.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="5.0.0" />
    <PackageReference Include="System.Text.Json" Version="4.7.2" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' != 'net5.0' and '$(TargetFramework)' != 'net6.0' and '$(TargetFramework)' != 'net7.0'">
    <PackageReference Include="linq2db" Version="3.7.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="3.1.17" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="3.1.17" />
    <PackageReference Include="System.Text.Json" Version="4.7.2" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net461'">
    <PackageReference Include="SQLitePCLRaw.bundle_winsqlite3" Version="2.1.5" />
  </ItemGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'net461'">
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

	<ItemGroup Condition=" '$(UseLocallyBuiltPackage)' != ''">
		<PackageReference Include="Vogen" Version="999.9.*" />
	</ItemGroup>

	<ItemGroup Condition=" '$(UseLocallyBuiltPackage)' == ''">
		<PackageReference Include="Vogen" Version="3.0.6" />
	</ItemGroup>


  <!--Note the high version number: these tests are supposed to run using
  the NuGet dependency rather than a direct project dependency.
  Run the tests with `.\test.ps1` in the root folder.-->

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Dapper" Version="2.0.123" />
    <PackageReference Include="GitHubActionsTestLogger" Version="2.3.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="FluentAssertions" Version="6.11.0" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.6.2" />
    <PackageReference Include="xunit" Version="2.4.2" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.4.3">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="coverlet.collector" Version="6.0.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
    <CompilerGeneratedFilesOutputPath>Generated</CompilerGeneratedFilesOutputPath>
  </PropertyGroup>

  <ItemGroup>
    <!-- Don't include the output from a previous source generator execution into future runs; the */** trick here ensures that there's
  at least one subdirectory, which is our key that it's coming from a source generator as opposed to something that is coming from
  some other tool. -->
    <Compile Remove="Generated/*/**/*.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Update="nuget.local-packages.config">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

</Project>
