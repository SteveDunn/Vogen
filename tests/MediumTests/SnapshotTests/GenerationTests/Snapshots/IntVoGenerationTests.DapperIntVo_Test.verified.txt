// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

using Vogen;

namespace Whatever
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(DapperIntVoDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: int, Value = { _value }")]
    public partial struct DapperIntVo : global::System.IEquatable<DapperIntVo>
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly int _value;

        public readonly int Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public DapperIntVo()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private DapperIntVo(int value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static DapperIntVo From(int value)
        {
            

            DapperIntVo instance = new DapperIntVo(value);

            

            return instance;
        }

        public readonly global::System.Boolean Equals(DapperIntVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(Value, other.Value);
        }

        public readonly global::System.Boolean Equals(int primitive) => Value.Equals(primitive);

        public readonly override global::System.Boolean Equals(global::System.Object obj)
        {
            return obj is DapperIntVo && Equals((DapperIntVo) obj);
        }

        public static global::System.Boolean operator ==(DapperIntVo left, DapperIntVo right) => Equals(left, right);
        public static global::System.Boolean operator !=(DapperIntVo left, DapperIntVo right) => !(left == right);

        public static global::System.Boolean operator ==(DapperIntVo left, int right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(DapperIntVo left, int right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(int left, DapperIntVo right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(int left, DapperIntVo right) => !Equals(left, right.Value);

        public readonly override global::System.Int32 GetHashCode() => global::System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(_value);

        public readonly override global::System.String ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        
 
        



        public class DapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<DapperIntVo>
        {
            public override void SetValue(global::System.Data.IDbDataParameter parameter, DapperIntVo value)
            {
                parameter.DbType = global::System.Data.DbType.Int32;
                parameter.Value = value.Value;
            }

            public override DapperIntVo Parse(object value)
            {
                return value switch
                {
                    global::System.Int32 intValue => DapperIntVo.From(intValue),
                    global::System.Int64 longValue when longValue < global::System.Int32.MaxValue => DapperIntVo.From((global::System.Int32)longValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Int32.TryParse(stringValue, out var result) => DapperIntVo.From(result),
                    _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to DapperIntVo"),
                };
            }
        }




        internal sealed class DapperIntVoDebugView
        {
            private readonly DapperIntVo _t;

            DapperIntVoDebugView(DapperIntVo t)
            {
                _t = t;
            }

            public global::System.Boolean IsInitialized => _t._isInitialized;
            public global::System.String UnderlyingType => "System.Int32";
            public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public global::System.String Conversions => @"DapperTypeHandler";
                }

}
}