// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Supress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::Newtonsoft.Json.JsonConverter(typeof(NewtonsoftJsonGuidVoNewtonsoftJsonConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(NewtonsoftJsonGuidVoDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Guid, Value = { _value }")]
    public partial struct NewtonsoftJsonGuidVo : global::System.IEquatable<NewtonsoftJsonGuidVo>, global::System.IEquatable<System.Guid> ,  global::System.IComparable<NewtonsoftJsonGuidVo>
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly System.Guid _value;

        /// <summary>
        /// Gets the underlying <see cref="System.Guid" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public readonly System.Guid Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public NewtonsoftJsonGuidVo()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private NewtonsoftJsonGuidVo(System.Guid value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static NewtonsoftJsonGuidVo From(System.Guid value)
        {
            

            NewtonsoftJsonGuidVo instance = new NewtonsoftJsonGuidVo(value);

            

            return instance;
        }

        public static explicit operator NewtonsoftJsonGuidVo(System.Guid value) => From(value);
        public static explicit operator System.Guid(NewtonsoftJsonGuidVo value) => value.Value;

        // only called internally when something has been deserialized into
        // its primitive type.
        private static NewtonsoftJsonGuidVo Deserialize(System.Guid value)
        {
            

            

            return new NewtonsoftJsonGuidVo(value);
        }

        public readonly global::System.Boolean Equals(NewtonsoftJsonGuidVo other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return global::System.Collections.Generic.EqualityComparer<System.Guid>.Default.Equals(Value, other.Value);
        }

        public readonly global::System.Boolean Equals(System.Guid primitive) => Value.Equals(primitive);

        public readonly override global::System.Boolean Equals(global::System.Object obj)
        {
            return obj is NewtonsoftJsonGuidVo && Equals((NewtonsoftJsonGuidVo) obj);
        }

        public static global::System.Boolean operator ==(NewtonsoftJsonGuidVo left, NewtonsoftJsonGuidVo right) => Equals(left, right);
        public static global::System.Boolean operator !=(NewtonsoftJsonGuidVo left, NewtonsoftJsonGuidVo right) => !(left == right);

        public static global::System.Boolean operator ==(NewtonsoftJsonGuidVo left, System.Guid right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(NewtonsoftJsonGuidVo left, System.Guid right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(System.Guid left, NewtonsoftJsonGuidVo right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(System.Guid left, NewtonsoftJsonGuidVo right) => !Equals(left, right.Value);

        public int CompareTo(NewtonsoftJsonGuidVo other) => Value.CompareTo(other.Value);

        
    /// <inheritdoc cref="System.Guid.TryParse(string?, out System.Guid)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(string? input, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out NewtonsoftJsonGuidVo result) {
        if(System.Guid.TryParse(input, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.Guid.TryParse(System.ReadOnlySpan{char}, out System.Guid)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(System.ReadOnlySpan<char> input, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out NewtonsoftJsonGuidVo result) {
        if(System.Guid.TryParse(input, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.Guid.TryParse(string?, System.IFormatProvider?, out System.Guid)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(string? s, System.IFormatProvider? provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out NewtonsoftJsonGuidVo result) {
        if(System.Guid.TryParse(s, provider, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="System.Guid.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider?, out System.Guid)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    /// <exception cref="ValueObjectValidationException">Thrown when the value can be parsed, but is not valid.</exception>
    public static global::System.Boolean TryParse(System.ReadOnlySpan<char> s, System.IFormatProvider? provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out NewtonsoftJsonGuidVo result) {
        if(System.Guid.TryParse(s, provider, out var r)) {
            result = From(r);
            return true;
        }

        result = default;
        return false;
    }


        public readonly override global::System.Int32 GetHashCode() => global::System.Collections.Generic.EqualityComparer<System.Guid>.Default.GetHashCode(_value);

        /// <summary>Returns the string representation of the underlying type</summary>
    /// <inheritdoc cref="{item.UnderlyingTypeFullName}.ToString()" />
    public readonly override global::System.String ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        
 
        

        class NewtonsoftJsonGuidVoNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(NewtonsoftJsonGuidVo);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (NewtonsoftJsonGuidVo)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var guid = serializer.Deserialize<System.Guid?>(reader);
                return guid.HasValue ? NewtonsoftJsonGuidVo.Deserialize(guid.Value) : null;
            }
        }






        internal sealed class NewtonsoftJsonGuidVoDebugView
        {
            private readonly NewtonsoftJsonGuidVo _t;

            NewtonsoftJsonGuidVoDebugView(NewtonsoftJsonGuidVo t)
            {
                _t = t;
            }

            public global::System.Boolean IsInitialized => _t._isInitialized;
            public global::System.String UnderlyingType => "System.Guid";
            public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public global::System.String Conversions => @"NewtonsoftJson";
                }

}
}