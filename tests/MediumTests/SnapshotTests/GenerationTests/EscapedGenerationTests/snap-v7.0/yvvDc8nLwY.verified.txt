// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Supress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Vogen;

namespace @class
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(escapedTestspublic_partial_record_structConversions_TypeConverterSystemTextJsonConverter))]
[global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_partial_record_structConversions_TypeConverterNewtonsoftJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(escapedTestspublic_partial_record_structConversions_TypeConverterTypeConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(escapedTestspublic_partial_record_structConversions_TypeConverterDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: double, Value = { _value }")]
    public partial record struct escapedTestspublic_partial_record_structConversions_TypeConverter  :  global::System.IComparable<escapedTestspublic_partial_record_structConversions_TypeConverter>
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly double _value;

        /// <summary>
        /// Gets the underlying <see cref="double" /> value if set, otherwise a <see cref="ValueObjectValidationException" /> is thrown.
        /// </summary>
        public readonly double Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
            init
            {
                

                

                

                _value = value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public escapedTestspublic_partial_record_structConversions_TypeConverter()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private escapedTestspublic_partial_record_structConversions_TypeConverter(double value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static escapedTestspublic_partial_record_structConversions_TypeConverter From(double value)
        {
            

            escapedTestspublic_partial_record_structConversions_TypeConverter instance = new escapedTestspublic_partial_record_structConversions_TypeConverter(value);

            

            return instance;
        }

        public static explicit operator escapedTestspublic_partial_record_structConversions_TypeConverter(double value) => From(value);
        public static explicit operator double(escapedTestspublic_partial_record_structConversions_TypeConverter value) => value.Value;

        public int CompareTo(escapedTestspublic_partial_record_structConversions_TypeConverter other) => Value.CompareTo(other.Value);

        // only called internally when something has been deserialized into
        // its primitive type.
        private static escapedTestspublic_partial_record_structConversions_TypeConverter Deserialize(double value)
        {
            

            

            return new escapedTestspublic_partial_record_structConversions_TypeConverter(value);
        }

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        // record enumerates fields - we just want our Value and to throw if it's not initialized.
        /// <summary>Returns the string representation of the underlying <see cref="System.Double" />.</summary>
    /// <inheritdoc cref="System.Double.ToString()" />
    public override global::System.String ToString() => Value.ToString();

        
 
        
        class escapedTestspublic_partial_record_structConversions_TypeConverterSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<escapedTestspublic_partial_record_structConversions_TypeConverter>
        {
            public override escapedTestspublic_partial_record_structConversions_TypeConverter Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(reader.GetDouble());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, escapedTestspublic_partial_record_structConversions_TypeConverter value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteNumberValue(value.Value);
            }
        }

        class escapedTestspublic_partial_record_structConversions_TypeConverterNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(escapedTestspublic_partial_record_structConversions_TypeConverter);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = (escapedTestspublic_partial_record_structConversions_TypeConverter)value;
                serializer.Serialize(writer, id.Value);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                var result = serializer.Deserialize<global::System.Double?>(reader);
                return result.HasValue ? escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(result.Value) : null;
            }
        }

        class escapedTestspublic_partial_record_structConversions_TypeConverterTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Double) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Double doubleValue => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(doubleValue),
                    global::System.Int64 longValue => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize((global::System.Double)longValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Double.TryParse(stringValue, global::System.Globalization.NumberStyles.Float | global::System.Globalization.NumberStyles.AllowThousands, culture.NumberFormat, out var result) => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Double) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is escapedTestspublic_partial_record_structConversions_TypeConverter idValue)
                {
                    if (destinationType == typeof(global::System.Double))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString(culture);
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        public class DapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<escapedTestspublic_partial_record_structConversions_TypeConverter>
        {
            public override void SetValue(global::System.Data.IDbDataParameter parameter, escapedTestspublic_partial_record_structConversions_TypeConverter value)
            {
                parameter.DbType = global::System.Data.DbType.Double;
                parameter.Value = value.Value;
            }

            public override escapedTestspublic_partial_record_structConversions_TypeConverter Parse(object value)
            {
                return value switch
                {
                    global::System.Double doubleValue => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(doubleValue),
                    global::System.Int32 intValue => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(intValue),
                    global::System.Int64 longValue when longValue < global::System.Double.MaxValue => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize((global::System.Double)longValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Double.TryParse(stringValue, out var result) => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(result),
                    _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to escapedTestspublic_partial_record_structConversions_TypeConverter"),
                };
            }
        }

        public class EfCoreValueConverter : global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<escapedTestspublic_partial_record_structConversions_TypeConverter, global::System.Double>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    vo => vo.Value,
                    value => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(value),
                    mappingHints
                ) { }
        }

        public class LinqToDbValueConverter : global::LinqToDB.Common.ValueConverter<escapedTestspublic_partial_record_structConversions_TypeConverter, global::System.Double>
        {
            public LinqToDbValueConverter()
                : base(
                      v => v.Value,
                      p => escapedTestspublic_partial_record_structConversions_TypeConverter.Deserialize(p),
                      handlesNulls: false)
            { }
        }


        internal sealed class escapedTestspublic_partial_record_structConversions_TypeConverterDebugView
        {
            private readonly escapedTestspublic_partial_record_structConversions_TypeConverter _t;

            escapedTestspublic_partial_record_structConversions_TypeConverterDebugView(escapedTestspublic_partial_record_structConversions_TypeConverter t)
            {
                _t = t;
            }

            public global::System.Boolean IsInitialized => _t._isInitialized;
            public global::System.String UnderlyingType => "System.Double";
            public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public global::System.String Conversions => @"NewtonsoftJson, Default, EfCoreValueConverter, DapperTypeHandler, LinqToDbValueConverter";
                }

}
}