// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Vogen (https://github.com/SteveDunn/Vogen)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

using Vogen;

namespace @class
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Vogen", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(escapedTestspublic_partial_structConversions_TypeConverterSystemTextJsonConverter))]
[global::Newtonsoft.Json.JsonConverter(typeof(escapedTestspublic_partial_structConversions_TypeConverterNewtonsoftJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(escapedTestspublic_partial_structConversions_TypeConverterTypeConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(escapedTestspublic_partial_structConversions_TypeConverterDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: @class.record.@struct.@float.decimal, Value = { _value }")]
    public partial struct escapedTestspublic_partial_structConversions_TypeConverter : global::System.IEquatable<escapedTestspublic_partial_structConversions_TypeConverter>
    {
#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif

        private readonly global::System.Boolean _isInitialized;
        
        private readonly @class.record.@struct.@float.decimal _value;

        public readonly @class.record.@struct.@float.decimal Value
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                EnsureInitialized();
                return _value;
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public escapedTestspublic_partial_structConversions_TypeConverter()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif

            _isInitialized = false;
            _value = default;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private escapedTestspublic_partial_structConversions_TypeConverter(@class.record.@struct.@float.decimal value) 
        {
            _value = value;
            _isInitialized = true;
        }

        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        public static escapedTestspublic_partial_structConversions_TypeConverter From(@class.record.@struct.@float.decimal value)
        {
            

            escapedTestspublic_partial_structConversions_TypeConverter instance = new escapedTestspublic_partial_structConversions_TypeConverter(value);

            

            return instance;
        }

        public readonly global::System.Boolean Equals(escapedTestspublic_partial_structConversions_TypeConverter other)
        {
            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;

            return global::System.Collections.Generic.EqualityComparer<@class.record.@struct.@float.decimal>.Default.Equals(Value, other.Value);
        }

        public readonly global::System.Boolean Equals(@class.record.@struct.@float.decimal primitive) => Value.Equals(primitive);

        public readonly override global::System.Boolean Equals(global::System.Object obj)
        {
            return obj is escapedTestspublic_partial_structConversions_TypeConverter && Equals((escapedTestspublic_partial_structConversions_TypeConverter) obj);
        }

        public static global::System.Boolean operator ==(escapedTestspublic_partial_structConversions_TypeConverter left, escapedTestspublic_partial_structConversions_TypeConverter right) => Equals(left, right);
        public static global::System.Boolean operator !=(escapedTestspublic_partial_structConversions_TypeConverter left, escapedTestspublic_partial_structConversions_TypeConverter right) => !(left == right);

        public static global::System.Boolean operator ==(escapedTestspublic_partial_structConversions_TypeConverter left, @class.record.@struct.@float.decimal right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(escapedTestspublic_partial_structConversions_TypeConverter left, @class.record.@struct.@float.decimal right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(@class.record.@struct.@float.decimal left, escapedTestspublic_partial_structConversions_TypeConverter right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(@class.record.@struct.@float.decimal left, escapedTestspublic_partial_structConversions_TypeConverter right) => !Equals(left, right.Value);

        public readonly override global::System.Int32 GetHashCode() => global::System.Collections.Generic.EqualityComparer<@class.record.@struct.@float.decimal>.Default.GetHashCode(_value);

        public readonly override global::System.String ToString() => Value.ToString();

        private readonly void EnsureInitialized()
        {
            if (!_isInitialized)
            {
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new global::Vogen.ValueObjectValidationException(message);
            }
        }

        
 
        
        class escapedTestspublic_partial_structConversions_TypeConverterSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<escapedTestspublic_partial_structConversions_TypeConverter>
        {
            public override escapedTestspublic_partial_structConversions_TypeConverter Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = global::System.Text.Json.JsonSerializer.Deserialize<@class.@record.@struct.@float.@decimal>(ref reader, options);
                return escapedTestspublic_partial_structConversions_TypeConverter.From(primitive);
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, escapedTestspublic_partial_structConversions_TypeConverter value, global::System.Text.Json.JsonSerializerOptions options)
            {
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value);
            }
        }

        class escapedTestspublic_partial_structConversions_TypeConverterNewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(escapedTestspublic_partial_structConversions_TypeConverter);
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                var id = ((escapedTestspublic_partial_structConversions_TypeConverter)value).Value;
                serializer.Serialize(writer, id);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                return escapedTestspublic_partial_structConversions_TypeConverter.From(serializer.Deserialize<@class.@record.@struct.@float.@decimal>(reader));
            }
        }

        class escapedTestspublic_partial_structConversions_TypeConverterTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(@class.@record.@struct.@float.@decimal);
            }
        
            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                @class.@record.@struct.@float.@decimal ut = (@class.@record.@struct.@float.@decimal)value;

                return escapedTestspublic_partial_structConversions_TypeConverter.From(ut);
            }
        
            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(@class.@record.@struct.@float.@decimal);
            }
        
            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is escapedTestspublic_partial_structConversions_TypeConverter idValue)
                {
                    return idValue.Value;
                }
        
                return base.ConvertTo(context, culture, value, destinationType);
            }
        }


        public class DapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<escapedTestspublic_partial_structConversions_TypeConverter>
        {
            public override void SetValue(global::System.Data.IDbDataParameter parameter, escapedTestspublic_partial_structConversions_TypeConverter value)
            {
                parameter.Value = global::System.Text.Json.JsonSerializer.Serialize(value.Value);
            }

            public override escapedTestspublic_partial_structConversions_TypeConverter Parse(object value)
            {
                return value switch
                {
                    global::System.String stringValue =>
                        escapedTestspublic_partial_structConversions_TypeConverter.From(global::System.Text.Json.JsonSerializer.Deserialize<Bar>(stringValue)),
                    _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to escapedTestspublic_partial_structConversions_TypeConverter"),
                };
            }
        }
        
        public class EfCoreValueConverter : global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<escapedTestspublic_partial_structConversions_TypeConverter, global::System.String>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    vo => global::System.Text.Json.JsonSerializer.Serialize(vo.Value, default(global::System.Text.Json.JsonSerializerOptions)),
                    text => escapedTestspublic_partial_structConversions_TypeConverter.From(global::System.Text.Json.JsonSerializer.Deserialize<@class.@record.@struct.@float.@decimal>(text, default(global::System.Text.Json.JsonSerializerOptions))),
                    mappingHints
                ) { }
        }

        public class LinqToDbValueConverter : global::LinqToDB.Common.ValueConverter<escapedTestspublic_partial_structConversions_TypeConverter, global::System.String>
        {
            public LinqToDbValueConverter()
                : base(
                      v => global::System.Text.Json.JsonSerializer.Serialize(v.Value, default(global::System.Text.Json.JsonSerializerOptions)),
                      p => escapedTestspublic_partial_structConversions_TypeConverter.From(global::System.Text.Json.JsonSerializer.Deserialize<@class.@record.@struct.@float.@decimal>(p, default(global::System.Text.Json.JsonSerializerOptions))),
                      handlesNulls: false)
            { }
        }


        internal sealed class escapedTestspublic_partial_structConversions_TypeConverterDebugView
        {
            private readonly escapedTestspublic_partial_structConversions_TypeConverter _t;

            escapedTestspublic_partial_structConversions_TypeConverterDebugView(escapedTestspublic_partial_structConversions_TypeConverter t)
            {
                _t = t;
            }

            public global::System.Boolean IsInitialized => _t._isInitialized;
            public global::System.String UnderlyingType => "@class.@record.@struct.@float.@decimal";
            public global::System.String Value => _t._isInitialized ? _t._value.ToString() : "[not initialized]" ;

            #if DEBUG
            public global::System.String CreatedWith => _t._stackTrace?.ToString() ?? "the From method";
            #endif

            public global::System.String Conversions => @"NewtonsoftJson, Default, EfCoreValueConverter, DapperTypeHandler, LinqToDbValueConverter";
                }

}
}